-# FOCUS ON NOVELTY: pipe-based programming + channel values
-# *list* novel contributions at a high level
-# only touch on a few topics

%section#intro
  %h1 Magritte
  -# %p A UNIX Shell Suitable For Large Programs / A pipe-oriented language
  -# %p A Shell-like Model for General Purpose Programming
  %p A Language for Pipe-based Programming
  .tagline
    %p
      .bigger Jeanine Adkisson
      Advisor: Hidehiko Masuhara
    %p Programming Research Group, Tokyo Institute of Technology
    %p
      %code
        slides:
        %a(href="https://jneen.github.io/prg-magritte-slides") https://jneen.github.io/prg-magritte-slides

    %p
      %code
        code:
        %a(href="https://github.com/prg-titech/magritte") https://github.com/prg-titech/magritte

    %p
      %code
        mailto:
        %a(href="mailto:jneen@jneen.net") jneen@jneen.net
        ,
        %a(href="mailto:masuhara@acm.org") masuhara@acm.org


%section<
  %h2 Problem: Shells Are Bad.
  %h2 But Everyone Uses Them.
  -#.vs>
  -#  = code 'shell' do
  -#    :plain
  -#      #!/bin/bash

  -#      # complicated defaults!

  -#      getc() {
  -#        IFS= read -r -n1 -d '' "$@"
  -#      }
  -#.vs>
  -#  = code 'shell' do
  -#    :plain
  -#      #!/bin/bash

  -#      # whitespace separation issues!

  -#      greeting='hello world'
  -#      count-argv $greeting # => 2
  -#      count-argv 'hello world' # => 1


%section
  %h2 Why Does Everyone Use Shells?
  .vs3>
    .box.fragment.fragment-dim
      %h3 Ubiquity:
      .block
        Available on any UNIX platform!
  .vs3>
    .box
      %h3 OS Fluency:
      .block
        &ldquo;Feels&rdquo; directly connected to OS

  .vs3>
    .box
      %h3 REPL Feel:
      .block
        Designed for heavy REPL use

%section
  %h2 New Language: Magritte

  %h3 Goals:
  .vs3>
    .box
      %h3 OS Fluency:
      .block
        &ldquo;Feels&rdquo; directly connected to OS

  .vs3>
    .box
      %h3 REPL Feel
      .block
        Designed for heavy REPL use

  .vs3>
    .box.box-special
      %h3 General Use
      .block
        A usable general-purpose language

  %p Should be able to write large programs!

%section
  %h2 Other Attempts (partial overview)

  %ul
    %li.fragment
      %strong.go-get-it Scheme-shell
      \/
      %strong.go-get-it xonsh

      %p.sublist - Embed a shell into another language!
      %p.sublist - Two worlds


    %li.fragment
      %strong.go-get-it Rc
      \/
      %strong.go-get-it Es

      %p.sublist - Improve the shell model!
      %p.sublist - Missing data structure support

    %li.fragment
      %strong.go-get-it Windows Powershell

      %p.sublist - Most of the advantage comes from .NET integration
      %p.sublist - Object-oriented approach to pipes
      %p.sublist - Focus on OO, integration role over general-purpose
      %p.sublist - Verbosity impedes interactive usability

    %li.fragment
      %strong.go-get-it Elvish

      %p.sublist - Developed concurrently with Magritte
      %p.sublist - Value pipes, output/return unification
      %p.sublist - Shell-oriented data structures
      %p.sublist - No channel values


// %section
//   %h2 Design Philosophy
// 
//   %h3 Strategies:
//   %ul
//     %li
//       Derive all language concepts from UNIX APIs<br>
//       (as opposed to embedding another language's semantics,<br>
//       like <code>xonsh</code> or <code>scheme-shell</code>)
//     %li Minimal marshalling, no quotes for <code>exec</code> or string literals
//     %li Left-to-right pipe-based composition
//     %li
//       Provide real value-based semantics and abstraction tools<br>
//       (as opposed to everything-is-a-string, like <code>es</code> or <code>fish</code>)

%section(data-transition="slide-in fade-out")
  %h2
    What Makes a Shell Feel <span class="dune">&ldquo;Fluent&rdquo;</span>?
  .bigger
    %strong.sandy Core language concepts directly map to OS APIs

  .vs>
    .bigger
      %div environments
      %div argv
      %div processes
      %div pipes, files, stdio
      %div commands
      %div return codes

  -# .block
  -#   .vs3>
  -#     .box environments
  -#   .vs3>
  -#     .box argv
  -#   .vs3>
  -#     .box processes
  -#   .vs3>
  -#     .box pipes, files, stdio
  -#   .vs3>
  -#     .box commands
  -#   .vs3>
  -#     .box return codes

  %p
    %span.dune Common language of programs:
    every <span class="dune">&ldquo;general-purpose&rdquo;</span> programming language understands these.


-# %section(data-transition="fade-in slide-out")
-#   %h2 Design Strategy
-#   %h3 Use only features that are derived from OS APIs
-# 
-#   -# use a table
-# 
-#   .block
-#     .vs3>
-#       .box environments:<br>prototype objects!
-#     .vs3>
-#       .box argv:<br>vectors (nestable!)
-#     .vs3>
-#       .box processes:<br>threads!
-#     .vs3>
-#       .box pipes, files, stdio:<br>channels!
-#     .vs3>
-#       .box commands:<br>functions (w/closure!)
-#     .vs3>
-#       .box return codes:<br>error handling!
-# 
-#   -#.block
-#   -#  %p
-#   -#    This is in contrast to projects like <code>xonsh</code>
-#   -#    or <code>scheme-shell</code>, which apply an existing
-#   -#    language's semantics to a shell context.

%section(data-transition="fade-in slide-out")
  %h2 Design Strategy
  %h3 Use only features that are derived from OS APIs

  .vs>
    .bubble(style="right: 48%; top: 60%; font-size: 200%; font-weight: bold") &rarr;
    .bigger
      %div environments
      %div argv
      %div processes
      %div pipes, files, stdio
      %div commands
      %div return codes

  .vs.go-get-it>
    .bigger.right
      %div prototype objects
      %div vectors (nestable!)
      %div threads!
      %div channels!
      %div functions (w/closure!)
      %div error handling!

  %p
    %span.dune Keep the semantics close to the shell!

%section
  %h2 Validation

  %h4 Need to validate:
  %ul
    %li.fragment
      %p Magritte is appropriate <strong class="dune">for writing large programs</strong>
      %p.sublist
        \- Data structures
      %p.sublist
        \- Functional patterns
      %p.sublist
        \- Object-oriented patterns
    %li.fragment
      %p Magritte is appropriate <strong class="dune">for shell scripting</strong>
      %p.sublist
        \- Can integrate unrelated programs
      %p.sublist
        \- Does not require modifications
    %li.fragment
      %p Magritte is appropriate <strong class="dune">as an interactive system shell</strong>
      %p.sublist
        \- Syntax: Linear Composition
      %p.sublist
        \- Syntax: One-dimensional code

-#%section
-#  %h2 Syntax Design:<br> Pipe-Based Composition
-#  %h3 Compose complex pipelines linearly
-#
-#  %h4 Why not use lisp-like syntax?
-#
-#  .block.replacement
-#    .fragment.current-visible
-#      = code 'cursorscheme' do
-#        :plain
-#          ; user types (▮ = cursor)
-#          (fan 4 fetch-webpage (file-lines "url-list.txt"))▮
-#
-#    .fragment.current-visible
-#      = code 'cursorscheme' do
-#        :plain
-#          ; user backtracks to the front
-#          ▮(fan 4 fetch-webpage (file-lines "url-list.txt"))
-#
-#    .fragment.current-visible
-#      = code 'cursorscheme' do
-#        :plain
-#          ; user types
-#          (sort (map downcase (map '(html-select ".title") ▮(fan 4 fetch-webpage
-#                          (file-lines "url-list.txt"))
-#
-#    .fragment.last
-#      = code 'cursorscheme' do
-#        :plain
-#          ; user scans to the end and completes parentheses
-#          (sort (map downcase (map '(html-select ".title") (fan 4 fetch-webpage
-#                          (file-lines "url-list.txt")))))▮
-#
-#  %h4.fragment Lisp-like syntax is not ideal for REPL composition

-#%section
-#  %h2 Syntax Design:<br> Pipe-Based Composition
-#  %h3 Compose complex pipelines linearly
-#
-#  .replacement
-#    .fragment.current-visible
-#      = code 'qsh' do
-#        :plain
-#          # user types
-#          file-lines url-list.txt | fan 4 %fetch-webpage▮
-#    .fragment
-#      = code 'qsh' do
-#        :plain
-#          # user continues typing
-#          file-lines url-list.txt | fan 4 %fetch-webpage | each [%html-select title]
-#            | each %downcase | sort▮
-#
-#  .space
-#  %h4.fragment Design Goal: Can always continue typing to use previous results

-# redesign: show key features first
-# redesign: non-returning of functions more prominent

%section
  %h2 Language Design
  %h3 Key Features

  %ul
    %li.fragment
      %strong.go-get-it Value
      pipes

    %li.fragment
      %strong.go-get-it First-class
      channels (= pipes)

    %li.fragment
      %strong.go-get-it Streaming
      functions:
      %strong.pink-merengue output, not return

    %li.fragment
      %strong.go-get-it Asynchronous
      composition:
      %code ... | ...

    %li.fragment
      %strong.go-get-it Synchronous
      composition:
      %code (...)

    %li.fragment
      %strong.go-get-it Unifies
      both types of output:
      %code put

%section
  %h2 High-level Example

  .block
    = code 'qsh' do
      :plain
        lexical ::= %x              access ::= $obj!slot
        dynamic ::= $x              vector ::= [ ... ]
        binder ::= ?x               lambda ::= ( ... => ... )
        bare ::= x                  funcdef ::= (f ...) = ...

  .block
    .replacement
      .fragment.current-visible
        = code 'qsh' do
          :plain
            # given a filename that contains a list of urls,
            # return all the titles and descriptions.
            (get-titles-and-descriptions ?f) =
              file-lines $f
                | fan $threads %get-webpage
                | each (?page =>
                    put [($page!select title)
                         ($page!select description)])
                | each [%map %downcase]

      -#.fragment.current-visible
      -#  .bubble(style="top: 30%; right: 2%")
      -#    %p
      -#      each line is <strong>output</strong>
      -#      as a separate string
      -#  = code 'qsh' do
      -#    :plain
      -#      # given a filename that contains a list of urls,
      -#      # return all the titles and descriptions.
      -#      (get-titles-and-descriptions ?f) =
      -#        file-lines $f
      -#          | fan $threads %get-webpage
      -#          | each (?page =>
      -#              put [($page!select title)
      -#                   ($page!select description)])
      -#          | each [%map %downcase]

      -#.fragment.current-visible
      -#  .bubble(style="top: 35%; right: 15%")
      -#    %p
      -#      concurrent processing with a<br>
      -#      function (passed by value)
      -#  = code 'qsh' do
      -#    :plain
      -#      # given a filename that contains a list of urls,
      -#      # return all the titles and descriptions.
      -#      (get-titles-and-descriptions ?f) =
      -#        file-lines $f
      -#          | fan $threads %get-webpage
      -#          | each (?page =>
      -#              put [($page!select title)
      -#                   ($page!select description)])
      -#          | each [%map %downcase]

      -#.fragment.current-visible
      -#  .bubble(style="top: 37%; right: 7%")
      -#    %p
      -#      call a lambda function on every input
      -#  = code 'qsh' do
      -#    :plain
      -#      # given a filename that contains a list of urls,
      -#      # return all the titles and descriptions.
      -#      (get-titles-and-descriptions ?f) =
      -#        file-lines $f
      -#          | fan $threads %get-webpage
      -#          | each (?page =>
      -#              put [($page!select title)
      -#                   ($page!select description)])
      -#          | each [%map %downcase]

      -#.fragment.current-visible
      -#  .bubble(style="bottom: 35%; right: 10%")
      -#    %p
      -#      parentheses <strong>collect</strong> the output

      -#  .bubble(style="bottom: -3%; right: 9%")
      -#    %p
      -#      unquoted names are strings (&ldquo;barewords&rdquo;)
      -#  = code 'qsh' do
      -#    :plain
      -#      # given a filename that contains a list of urls,
      -#      # return all the titles and descriptions.
      -#      (get-titles-and-descriptions ?f) =
      -#        file-lines $f
      -#          | fan $threads %get-webpage
      -#          | each (?page =>
      -#              put [($page!select title)
      -#                   ($page!select description)])
      -#          | each [%map %downcase]

      -#.fragment
      -#  .bubble(style="bottom: 10%; right: 10%")
      -#    %p
      -#      a vector is <strong>callable</strong><br>
      -#      as a curried function

      -#  = code 'qsh' do
      -#    :plain
      -#      # given a filename that contains a list of urls,
      -#      # return all the titles and descriptions.
      -#      (get-titles-and-descriptions ?f) =
      -#        file-lines $f
      -#          | fan $threads %get-webpage
      -#          | each (?page =>
      -#              put [($page!select title)
      -#                   ($page!select description)])
      -#          | each [%map %downcase]

/%section
/  %h2 Language Design: Compatibility
/
/  .vs>
/    %ul
/      %li Idea: pass lambdas to external programs
/      %li <code>/usr/bin/qush-external-<emph>N</emph></code>
/      %li Standard <code>exec</code> interface
/      %li <code>$__QUSH_SERVER</code> and <code>$__QUSH_FUNCTION_<emph>N</emph></code>
/
/  .vs>
/    = code 'qsh' do
/      :plain
/
/        # calls into $my-fn in the
/        # current runtime once
/        # every 3 seconds
/
/        ; /usr/bin/watch -d 3 $my-fn
/
/  Bash cannot currently do this.


%section
  %h2 Concurrency Primitives

  .vs>
    %h4 Channels as values
    = code 'qsh' do
      :plain
        channel = (make-channel)

        # write values with `put`
        put 1 2 3 > $channel

        # read a value with `get`
        get < $channel
    -#>

    .space

    %h4 Spawning: Run in the background
    = code 'qsh' do
      :plain
        & f arg arg
        & f >$out <$in
        & foo | bar | baz
    -#>


  .vs>
    %h4 Anonymous channels (pipes)
    = code 'qsh' do
      :plain
        command-1 | command-2

        # equivalent to

        channel = (make-channel)

        & command-1 > $channel
        command-2 < $channel

-# vimmmm
-# >

%section
  %h2
    Concurrency: Interruption

  %h3 Why is Interruption Necessary?

  .vs>
    %h4 Pattern: Full Iteration
    = code 'qsh' do
      :plain
        file-lines $f
          | each (=> ...)
  .vs>
    %h4 Implementation: Infinite Loops
    = code 'qsh' do
      :plain
        (each ?fn) =
          loop (=> fn (get))

  %center.fragment
    %strong.go-get-it Problem:
    How does
    %code.sandy each
    know when to stop?

  .fragment
    .vs>
      %h4 Pattern: Partial Iteration
      = code 'qsh' do
        :plain
          file-lines $f
            | take 10
    .vs>
      %h4 Implementation: Simple Return
      = code 'qsh' do
        :plain
          (take ?n) = gt 0 %n &&
            (get; take (decr %n))

    %center.fragment
      %strong.go-get-it Problem:
      How does
      %code.sandy file-lines
      know when to close the file?






-# %section
-#   %h2 Concurrency: Interruption
-# 
-#   %h3 What should the behavior of this code be?
-# 
-#   .vs>
-#     = code 'qsh' do
-#       :plain
-#         (count-forever ?n) = (
-#           put $n
-#           count-forever (incr $n)
-#         )
-# 
-#         take = (
-#           0 => # return
-#           ?n => put (get)
-#                 take (decr $n)
-#         )
-# 
-#         count-forever 0 | take 10
-# 
-#   .replacement.vs>
-#     .fragment.current-visible
-#       = code 'qsh' do
-#         :plain
-#           => 0; => 1; => 2; => ...; => 9
-# 
-#           # but what happens to the process
-#           # running `count-forever`...?
-# 
-#     .block.fragment
-#       %h4 Naive Approach: Nothing!
-# 
-#       %ul
-#         %li
-#           %span.code count-forever
-#           tries to write 10 to the output, blocks
-#         %li
-#           %span.code take
-#           returns after 9, never reads
-#         %li
-#           %span.code count-forever
-#           gets garbage-collected later
-# 
-#     .fragment.box
-#       %h4 This works!
-#       %p ...as long as there are no cleanup actions
-# 
-# %section(data-transition="slide-in fade-out")
-#   %h2 Concurrency: Interruption
-# 
-#   %h3 But what if there are cleanup actions?
-# 
-#   .vs>
-#     = code 'qsh' do
-#       :plain
-#         (file-lines ?fname) = (
-#           file = (open-file $fname
-#             %%! close-file $fname)
-#           ...
-#         )
-# 
-# 
-#         file-lines /tmp/huge-file
-#           | take 10
-# 
-#   .vs.nfragment>
-#     %h4
-#       With the naive approach, the file will remain open until gc!
-# 
-#     .space
-#     %p.left Processes expect to be cleaned up when the processes they're communicating with hang up.
-# 
-#     .space
-#     %p.left They expect an <strong>interrupt</strong> signal of some kind.
-# 
-#   %p.cite <em>Inoue, Aotani, and Igarashi [2018]: &ldquo;ContextWorkFlow: A Monadic DSL for Compensable and Interruptible Executions&rdquo;</em>
-# 
-# %section(data-transition="fade-in slide-out")
-#   %h2 Concurrency: Interruption
-# 
-#   %h3 Idea: channel-closing semantics
-# 
-#   .vs>
-#     = code 'qsh' do
-#       :plain
-#         (file-lines ?fname) = (
-#           file = (open-file $fname
-#             %%! close-file $fname)
-#           ...
-#         )
-# 
-# 
-#         file-lines /tmp/huge-file
-#           | take 10
-# 
-#   .vs>
-#     %ul
-#       %li.fragment
-#         When
-#         %span.code take 10
-#         returns, it
-#         %strong closes
-#         the channel.
-# 
-#       %li.fragment
-#         The
-#         %span.code file-lines
-#         process is either blocked on the channel or tries to write later
-# 
-#       %li.fragment
-#         Either situation results in the
-#         %span.code file-lines
-#         process being
-#         %strong< interrupted
-#         , and having its cleanup actions run.
-# 
-#       -#.space
-#       -#%h4.fragment This is how it works in bash already!
-# 
-#   %p.cite <em>Inoue, Aotani, and Igarashi [2018]: &ldquo;ContextWorkFlow: A Monadic DSL for Compensable and Interruptible Executions&rdquo;</em>
-# 
-# %section
-#   %h2 Concurrency: Interruption
-# 
-#   %h3 Multiple Readers/Writers
-# 
-#   .block
-#     <strong>BUT: </strong>
-#     Since spawned processes inherit inputs and outputs,<br>
-#     it will be common to have <strong>multiple readers and writers</strong><br>
-#     interacting with a channel at the same time.
-# 
-#   .block.fragment
-#     %p
-#       %strong If we close channels when a process exits, how should this code behave?
-# 
-#     = code 'qsh' do
-#       :plain
-#         put one two three four five | (& take 2; & take 10) | take 5
-# 
-#   -#=> 0 1 3 2 4
-# 
-#   .space
-#   %h4.fragment We must leave channels open if they're still in use

%section
  %h2 Concurrency: Interruption

  %h3 Idea: Probably blocked forever &rarr; Interrupt!

  %center
    %img{src: image_data('channel.png')}

%section
  %h2 Concurrency: Interruption

  %h3 When to close a channel?

  .vs>
    %strong.go-get-it
      when the last reader exits

    %p
      No more writes possible &rarr;
      %strong.pink-merengue close!

  .vs>
    %strong.go-get-it
      when the last writer exits

    %p
      No more reads possible &rarr;
      %strong.pink-merengue close!

  %h3 When to interrupt a process?

  .vs>
    %strong.go-get-it Currently waiting channel closes:
    %p
      Probably blocked forever &rarr;
      %strong.pink-merengue interrupt!
  .vs>
    %strong.go-get-it Try to read/write a closed channel:
    %p
      Probably blocked forever &rarr;
      %strong.pink-merengue interrupt!

  .space
  %h4.chilly &ldquo;The last one to leave has to turn off the lights&rdquo;

-#%section
-#  %h2 Concurrency: Interruption
-#
-#  %h3 Idea: Interrupt a process when it's probably blocked forever
-#
-#  %center
-#    interrupt a process when:<br>
-#    %strong.bigger.fragment
-#      a channel it is blocked on closes
-#    %br/
-#
-#    .fragment
-#      \~ or ~
-#      %br/
-#
-#      %strong.bigger
-#        it tries to interact with a closed channel
-#      -#.fragment (why?)

-#%section
-#  %h2 Concurrency: Interruption
-#
-#  %h3 Problem: Reopening
-#
-#  .vs>
-#    %h4 What should this code do?
-#
-#    = code 'qsh' do
-#      :plain
-#        c = (make-channel)
-#        & count-forever > $c
-#        & take 10 < $c
-#        put 10 > $c
-#    .space
-#
-#    %p.fragment
-#      This code contains a <strong>race condition</strong>.
-#
-#    -#>
-#  .vs>
-#    %div
-#      %p.left.fragment
-#        If <code>take 10</code> returns before <code>put 10</code> is executed,
-#        the channel will <strong>close</strong>. Otherwise the number 10 will be
-#        inserted into the first 10 elements.
-#      .space
-#      %p.left.fragment
-#        If we allow <code>$c</code> to be <strong>reopened</strong>, then
-#        there is a worse race condition: if the channel closes before the final
-#        <code>put</code>, we will remain blocked forever on the channel.
-#
-#  %h4.fragment
-#    Therefore: Channel closing is permanent - further interactions will interrupt


/%section
/  %h2 Concurrency: Interruption
/
/  %h3 Problem: Closing Semantics = No Dynamic Channels
/
/  %h4 We can no longer write to a channel and leave it open!
/
/  .block
/    = code 'qsh' do
/      :plain
/        (make-broadcaster) = (
/          outputs = []
/
/          put {
/            (subscribe ?ch) = (%outputs = [...%outputs %ch])
/            (publish ?msg) = (for %outputs | each (%ch => put %msg > %ch))
/          }
/        )
/
/  %h4.fragment We can't keep a dynamic list of channels open continuously for writing.

/ %section
/   %h2 Concurrency: Interruption
/ 
/   %h3 Possible Solutions
/ 
/   .block
/     .vs>
/       %h4 Multiple writers to stdout (<span class="code">&amp;1</span>)
/       = code 'qsh' do
/         :plain
/           (subscribe >?c) = (
/             %channels = [...%channels %c]
/ 
/             # never return!
/             # keep stdout open!
/             sleep-forever
/           )
/ 
/           # usage
/           $bc!subscribe > $somewhere
/ 
/     .vs.fragment>
/       %h4 This is how UNIX FIFOs work!
/       %h4 (except they have a fixed buffer)
/       = code 'console' do
/         :plain
/           ~$ echo 'demo time!'
/           demo time!
/           ~$ 

-# Size of code (SLOC or similar)
%section
  %h2 Implementation
  %p
    %code
      code:
      %a(href="https://github.com/prg-titech/magritte" style="text-decoration: none") https://github.com/prg-titech/magritte

  %h3 Stage 1: Magritte-DSL
  .block
    .vs
      = code 'ruby' do
        :plain
          s { put 1; put 2 }
            .p { put(get + get) }
            .p { put(get * 2) }
            .call

  .block
    %ul
      %li
        DSL implemented in
        %strong.pink-merengue Ruby
      %li
        Implements the concurrency primitives only
      %li
        Does not implement return/output unification

%section
  %h2 Implementation
  %p
    %code
      code:
      %a(href="https://github.com/prg-titech/magritte" style="text-decoration: none") https://github.com/prg-titech/magritte

  %h3 Stage 2: Magritte Interpreter

  .block
    %ul
      %li
        Uses
        %strong.pink-merengue Magritte-DSL
        for concurrency
      %li
        Implements Magritte syntax and data structures
      %li
        Implements <strong class="dragon">return</strong>/<strong class="schrill">output</strong> unification
      %li
        Total implementation around
        %strong.pink-merengue ~3360 SLOC

  .block
    %img{src: image_data('arch.png')}


%section
  %h2 UNIX integration

  .block
    %ul
      %li
        %strong.pink-merengue Incomplete
      %li
        Why? Needed to solve the#{' '}
        %strong.schrill> input-stealing problem
        \.

        %p.sublist
          \- UNIX commands assume exclusive read access
        %p.sublist
          \- This can make inputs disappear!
      %li
        Solution#{' '}
        %strong.go-get-it> designed
        , but#{' '}
        %strong.pink-merengue> not implemented
        \.

        %p.sublist
          \- Syntax-driven detection of when <code>stdin</code> is used


%section
  %h2 Validation

  %h4 Need to validate:
  %ul
    %li.fragment
      %p Magritte is appropriate <strong class="dune">for writing large programs</strong>
      %p.sublist
        %strong.pink-merengue problem:
        Lots of concurrent code, which is difficult to debug
      %p.sublist
        %strong.sandy BUT:
        Have enabled programs which use data structures, not possible in bash
    %li.fragment
      %p Magritte is appropriate <strong class="dune">for shell scripting</strong>
      %p.sublist
        %strong.pink-merengue problem:
        UNIX integration is more difficult than we first expected
    %li.fragment
      Magritte is appropriate <strong class="dune">as an interactive system shell</strong>
      %p.sublist
        %strong.pink-merengue problem:
        Also needs UNIX integration
      %p.sublist
        %strong.sandy BUT:
        Have preserved the shell composition strategy and repl interaction

%section
  %h2 Future Directions

  %ul
    %li.fragment
      %strong.go-get-it> VM
      \-based interpreter / concurrent debugger
    %li.fragment
      %strong.go-get-it OS
      integration
    %li.fragment
      %strong.go-get-it Interactive
      features

      %p.sublist - automatic completion
      %p.sublist - history integration
      %p.sublist - output formatting / folding
    %li.fragment
      %strong.go-get-it Library
      support
    %li.fragment
      %strong.go-get-it Rich
      integrations

      %p.sublist - produce values as JSON
      %p.sublist - invoke lambda from an external program



/ %section
/   %h2 Magritte
/ 
/   %h4 Example 1
/ 
/   = code 'ruby' do
/     :plain
/       # (put 1; put 2) | add (get) (get) | mul 2 (get)
/       code do
/         s { put 1; put 2 }.p { put(get + get) }.p { put(get * 2) }.call
/ 
/         put 10
/       end
/ 
/       assert { output == [6, 10] }
/ 
/ %section
/   %h2 Magritte
/ 
/   %h4 Example 2
/ 
/   = code 'ruby' do
/     :plain
/       code do
/         s { for_ (0...30) }.p {
/           s { drain }.go
/           s { drain }.go
/           s { drain }.go
/         }.p { take 30 }.call
/       end
/ 
/       assert { output.sort == (0...30).to_a }
/ 
/ %section
/   %h2 Magritte
/ 
/   %h4 Example 3
/ 
/   .vs>
/     = code 'ruby' do
/       :plain
/         def put(val)
/           Proc.current.stdout.write(val)
/         end
/ 
/         def get
/           Proc.current.stdin.read
/         end
/ 
/   .vs>
/     = code 'ruby' do
/       :plain
/         def map(&f)
/           loop do
/             put (f.call(get))
/           end
/         end
/ 
/         def take(n)
/           n.times { put(get) }
/         end
/ 
/ %section
/   %h2 Magritte: Channels
/ 
/   = code 'ruby' do
/     :plain
/       class Channel
/         def initialize
/           @mutex = Mutex.new  # mutex for changing channel state
/ 
/           @block_type = :none # block type
/           @block_set = []     # blocked threads/values/refs
/ 
/           @readers = Set.new  # registered readers
/           @writers = Set.new  # registered writers
/ 
/           @open = true        # open/close state
/         end
/ 
/         # ...
/       end
/ 
/ %section
/   %h2 Magritte: Channels
/ 
/   %h3 Channel States (<code>@block_type</code>)
/ 
/   .vs3>
/     %h4 <code>:write</code>
/     = code 'plaintext' do
/       :plain
/         (t,v)
/         ******** -> _(.w._)
/ 
/   .vs3>
/     %h4 <code>:none</code>
/     = code 'plaintext' do
/       :plain
/                 ~~~
/               v(.w.)v
/ 
/   .vs3>
/     %h4 <code>:read</code>
/     = code 'plaintext' do
/       :plain
/                      (t,_)
/         (_.w.)_ <- *******
/ 
/   -#>
/ 
/   .vs3>
/     block set contains<br>
/     %code (thread, value)
/     pairs (<code>Sender</code>)
/ 
/   .vs3>
/ 
/   .vs3>
/     block set contains<br>
/     %code (thread, ref)
/     pairs (<code>Receiver</code>)
/ 
/ 
/ 
/ 
/ %section
/   %h2 Magritte: Channels
/ 
/   %h4 Blocked Writers
/ 
/   .vs>
/     = code 'ruby' do
/       :plain
/         def read
/         # ...
/         case @block_type
/         when :none, :read
/           # ...
/         when :write
/           sender = @block_set.shift
/           @block_set.empty? &&
/             @block_type = :none
/ 
/           sender.wakeup
/           return sender.val
/         end
/ 
/   .vs>
/     = code 'ruby' do
/       :plain
/         def write(val)
/         # ...
/         case @block_type
/         when :none, :write
/           @block_type = :write
/           @block_set <<
/             Sender.new(Thread.current,
/                        val)
/           @mutex.sleep
/         when :read
/           # ...
/         end
/ 
/   -# >
/ 
/ %section
/   %h2 Magritte: Channels
/ 
/   %h4 Blocked Readers
/ 
/   .vs>
/     = code 'ruby' do
/       :plain
/         def read
/         # ...
/         case @block_type
/         when :none, :read
/           @block_type = :read
/           receiver =
/             Receiver.new(Thread.current)
/           @block_set << receiver
/ 
/           @mutex.sleep
/           return receiver.val
/         when :write
/           # ...
/         end
/   -# >
/ 
/   .vs>
/     = code 'ruby' do
/       :plain
/         def write(val)
/         # ...
/         case @block_type
/         when :none, :write
/           # ...
/         when :read
/           receiver = @block_set.shift
/           @block_set.empty? &&
/             @block_type = :none
/ 
/           receiver.val = val
/           receiver.wakeup
/           # ...
/         end
/ 
/ %section
/   %h2 Magritte: Channel Registration
/ 
/   .block
/     %ul
/       %li Register and unregister processes at launch and exit
/       %li
/         When the last process unregisters from either end,
/         %ol
/           %li Set the channel state to closed
/           %li Interrupt all the processes in the block set
/           %li Cause any further reads/writes to interrupt the process
/ 
/       %li
/         Important: Eagerly remove our own thread from the block set
/         so we don't interrupt ourself during shutdown!
/ 
/ %section
/   %h2 Magritte: Channel Registration
/ 
/   = code 'ruby' do
/     :plain
/       class Proc
/         # ...
/         def start
/           # ...
/           @env.each_input { |c| c.add_reader(self) }
/           @env.each_output { |c| c.add_writer(self) }
/           @thread[:magritte_start_mutex].unlock # start running user code!
/           # ...
/         end
/ 
/         # ...
/ 
/         def cleanup!
/           @env.each_input { |c| c.remove_reader(self) }
/           @env.each_output { |c| c.remove_writer(self) }
/         end
/ 
/ %section
/   %h2 Magritte: Channel Registration
/ 
/   = code 'ruby' do
/     :plain
/       def remove_reader(process)
/         action = @mutex.synchronize do
/           next :nop unless @open
/           @block_set.reject! { |b| b.thread == process } if @block_type == :read
/ 
/           @readers.delete(process)
/           next :nop if @readers.size > 0
/ 
/           @open = false
/           :close
/         end
/ 
/         @block_set.each(&:interrupt!) if action == :close
/       end
/  -# >
/%section
/  %h2 Implementation Progress
/  %h3 RPython + MacroPy
/  .block
/    = code 'python' do
/      :plain
/        @functor
/        class Syntax:
/            class list([elements]): pass
/            class paren([statements]): pass
/            class assign(~lhs, ~rhs): pass
/            class bare(value/unicode): pass
/            class dynvar(name/unicode): pass
/            class pipe(~lhs, ~rhs): pass
/            class call(loc/LocRange, ~func, [args]): pass
/            ...
/
/%section
/  %h2 Implementation Progress
/  %h3 In-Progress
/  .block
/    %ul
/      %li Skeleton Tree-based parser
/      %li Bytecode Design
/  %h3 TODO
/  .block
/    %ul
/      %li Bytecode Compiler
/      %li Bytecode Interpreter

%section
  %h2 Questions?

%section
  %h2 Thank You!
